'''
Обход графа в глубину (DFS) – один из самых простых алгоритмов обхода
графа. Он основан на идее «погружения» в глубину исследуемого графа 
до тех пор, пока не будет достигнута конечная точка или пока не будут
исследованы все вершины графа.

Алгоритм DFS работает следующим образом:
1. Выбираем стартовую вершину и помечаем ее как посещенную.
2. Для каждой непосещенной вершины, смежной с текущей, рекурсивно 
вызываем алгоритм DFS.
3. После обхода всех смежных вершин возвращаемся к текущей вершине и
продолжаем поиск в глубину.
4. Повторяем шаги 2-3 до тех пор, пока не будут исследованы все вершины
графа.
Пример задачи, решаемой с помощью алгоритма DFS, – поиск компонент 
связности в графе.

Временная сложность алгоритма DFS зависит от размера графа и его 
структуры. В худшем случае, когда граф имеет форму длинной цепочки, 
сложность алгоритма составляет O(N^2), где N – количество вершин
в графе. В лучшем случае, когда граф имеет форму дерева, сложность 
алгоритма составляет O(N), где N – количество вершин в графе.

Свойство дерева обхода заключается в том, что при обходе графа в глубину каждая
вершина становится либо посещенной, либо помеченной, где помеченная 
вершина является предком некоторой посещенной вершины. Таким образом, 
обход графа в глубину строит дерево, которое называется 
деревом обхода. Дерево обхода является подмножеством исходного графа 
и содержит все вершины исходного графа.
'''


inc = {
1: [2, 8],
2: [1, 3, 8],
3: [2, 4, 8],
4: [3, 7, 9],
5: [6, 7],
6: [5],
7: [4, 5, 8],
8: [1, 2, 3, 7],
9: [4],
}

visited = set()

def dfs(v):
    if v in visited:
        return
    visited.add(v)
    for i in inc[v]:
        if not i in visited:
            dfs(i)
            
start = 1
dfs(start)
print(visited)
