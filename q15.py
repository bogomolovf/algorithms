'''
Мостом в графе называется ребро, удаление которого приводит к разбиению 
графа на две или более компоненты связности. Таким образом, мост 
является важным элементом структуры графа, поскольку он определяет 
его связность.

Алгоритм нахождения мостов в графе основан на обходе графа в глубину 
(DFS). При обходе графа в глубину для каждого ребра (u, v) вычисляются 
два значения: tin[v] и low[v].

tin[v] – это время захода в вершину v, т.е. время, когда DFS впервые 
посетила эту вершину.
low[v] – это минимальное значение tin, достижимое из v по ребрам 
дерева DFS и обратным ребрам (т.е. ребрам, ведущим от потомков вершины 
v к ее предкам), а также по прямым ребрам, если они ведут к вершинам, 
которые были посещены ранее. Если для ребра (u, v) выполняется условие 
low[v] > tin[u], то это ребро является мостом. Это означает, что 
вершина v не имеет обратных ребер или прямых ребер, ведущих к вершинам, 
которые были посещены ранее, и что удаление этого ребра приведет к 
разбиению графа на две компоненты связности.

Алгоритм нахождения мостов в графе:
1. Инициализируем массивы tin и low значениями -1.
2. Запускаем DFS из произвольной вершины графа.
3. В процессе DFS для каждого ребра (u, v) вычисляем значения 
tin[v] и low[v].
4. Если для ребра (u, v) выполняется условие low[v] > tin[u], 
то это ребро является мостом.
5. После окончания обхода графа все найденные мосты сохраняем в 
отдельный список.
'''

def find_bridges(graph):
    n = len(graph)
    tin = [-1] * n
    low = [-1] * n
    bridges = []
    timer = 0

    def dfs(v, p=-1):
        nonlocal timer
        tin[v] = low[v] = timer
        timer += 1
        for to in graph[v]:
            if to == p:
                continue
            if tin[to] == -1:
                dfs(to, v)
                low[v] = min(low[v], low[to])
                if low[to] > tin[v]:
                    bridges.append((v, to))
            else:
                low[v] = min(low[v], tin[to])

    for i in range(n):
        if tin[i] == -1:
            dfs(i)
    return bridges